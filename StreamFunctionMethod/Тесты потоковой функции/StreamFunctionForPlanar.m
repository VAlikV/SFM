clc
clear all
close all

%% ------------------------------------------------------------------------- % Задание параметров

tic
Calc = 1;
Interp = 1;
OutData = 0;

H = 0.15; % Ширина катушки
nfi = 21;

L = 0.15; % Половина длины катушки (от 0 в одну сторону)
nL = 21;

D = 0.03;

B0 = 10^(0); % Внешнее поле
alpfa = 50;  % Вклад индукции
betta = 0.00; % Вклад мощности

ro = 0.017; % Удельное сопротивление (Ом*мм^2/м)
t = 2;      % Тольщина слоя (мм) 

Nc = 10;        % Количество витков

er = 0.007;    % Отклонение от уровня
eb = 0.007;    % Отклонение от уровня

%% ------------------------------------------------------------------------- % Создание массива узлов

N = nfi*nL; % Количество узлов

Node = zeros(nfi,3); % Сетка
Temp = zeros(nfi,3); 

f = linspace(-H,H,nfi); % Массив значений ширины
l = linspace(-L,L,nL); % Массив значений длины

Node(:,1) = l(1);      % X
Node(:,2) = f;         % Y
Node(:,3) = D;         % Z

for i = 2:nL
    Temp(:,1) = l(i); % X
    Temp(:,2) = f;    % Y        
    Temp(:,3) = D;    % Z
    Node = [Node; Temp];
end
clear f l Temp

%% ------------------------------------------------------------------------- Создание массива треугольных элементов

S = [];             % Массив элементов (хранится информация о номерах узлов, составляющих элемент)
Temp = zeros(2,3);
i = 1;
while i <= N-nfi            % Заолнение массива элементов     
    if mod(i,nfi) ~= 0 
        Temp(1,1) = i;     % По два треугольника в одном квадрате
        Temp(1,2) = i+nfi;
        Temp(1,3) = i+nfi+1;
        Temp(2,1) = i;
        Temp(2,2) = i+nfi+1;
        Temp(2,3) = i+1;
        S = [S; Temp];
    else                    % Последние элементы в кольце
%         S(2*i-1,1) = i;     % По два треугольника в одном квадрате
%         S(2*i-1,2) = i+nfi;
%         S(2*i-1,3) = i+1;
%         S(2*i,1) = i;
%         S(2*i,2) = i+1;
%         S(2*i,3) = i-nfi+1;
         
    end
    i = i + 1;
end

T = size(S,1); % Длинна массива элементов

clear Temp
%% ------------------------------------------------------------------------- % Создание массива ROI (FOV)
 
nx = 7;    % Кол-во точек вдоль Х
ny = 7;    % Кол-во точек вдоль Y
nz = 7;    % Кол-во точек вдоль Z
lx = 0.05;  % Длина области вдоль Х
ly = 0.05;  % Длина области вдоль Y
lz = 0.05;  % Длина области вдоль Z
ROI = [];

level = -0.0;  % Положение плоскости
plane = 1;  % Выбор плоскости 0)XY, 1)XZ, 2)YZ

K = nx*ny*nz;  % Полное число точек ROI
dy = ly/(ny-1);
dz = lz/(nz-1);
for j = 1:nz
    z = -lz/2+(j-1)*dz;
    for i = 1:ny
        y = -ly/2+(i-1)*dy;
        Temp = [transpose(linspace(-lx/2,lx/2,nx)) y*ones(nx,1) z*ones(nx,1)];
        ROI = [ROI; Temp];
    end
end

clear x y z dx dy dz Temp

%% ------------------------------------------------------------------------- % Отрисовка сетки

n = 113;
Si = N2T(n,S); % Проверка функции N2T

%Ar = Area(S(St,:), Node);
%ri = N2Tri(n,S, nfi, N);

figure('Name','Сетка','NumberTitle','off'); 
movegui([0 560]);
plot3(Node(:,1),Node(:,2),Node(:,3),'b.'); % Отрисовка узлов
hold on
xlabel ('x [m]'), ylabel ('y [m]'), zlabel ('z [m]')
axis equal
grid on 
plot3(Node(S(Si,:),1),Node(S(Si,:),2),Node(S(Si,:),3),'g*'); % Отрисовка элемента (N2T) 
% for i=1:N
%     text(Node(i,1),Node(i,2),Node(i,3),num2str(i),'Color','black','FontSize',8) % Нумерация узлов
% end
for i = 1:T
    plot3(Node(S(i,:),1),Node(S(i,:),2),Node(S(i,:),3),'r-'); % Отрисовка сетки
end
plot3(ROI(:,1),ROI(:,2),ROI(:,3),'k.'); % Отрисовка ROI

% for St = 1:length(Si)
%     Jn = CalcJn(n, S(Si(St),:), Node);
%     quiver3(Jn(2,1),Jn(2,2),Jn(2,3),Jn(1,1),Jn(1,2),Jn(1,3),'Color','b','LineWidth',1,'ShowArrowHead', 'on')
% end

%% ------------------------------------------------------------------------- % Задание целевого поля

Bdes = 0.5*ones(K,1); %ROI(:,1); % Вычисление целевого поля

%Bdes = ROI(:,3);

[X,Y,Z,B] = Transform3D(lx, ly, lz, nx, ny, nz, Bdes); % Для отрисовки поля

figure('Name','Целевое поле','NumberTitle','off'); 
movegui([570 560]);
if (plane == 0) % ---------------------------------------------------------- XY
    k = find(Z(1,1,:)==level);
    surf(X(:,:,k), Y(:,:,k), B(:,:,k))
    xlabel ('x [m]'), ylabel ('y [m]'), title(strcat('Bz [T], z = ', num2str(level))) 
elseif (plane == 1) % ------------------------------------------------------ XZ 
    k = find(Y(1,:,1)==level);
    XX = reshape(X(:,k,:),[nx,nz,1]);
    ZZ = reshape(Z(:,k,:),[nx,nz,1]);
    BB = reshape(B(:,k,:),[nx,nz,1]);
    surf(XX, ZZ, BB)
    xlabel ('x [m]'), ylabel ('z [m]'), title(strcat('Bz [T], y = ', num2str(level)))
elseif (plane == 2) % ------------------------------------------------------ YZ
    k = find(X(:,1,1)==level);
    YY = reshape(Y(k,:,:),[ny,nz,1]);
    ZZ = reshape(Z(k,:,:),[ny,nz,1]);
    BB = reshape(B(k,:,:),[ny,nz,1]);
    surf(YY, ZZ, BB)
    xlabel ('y [m]'), ylabel ('z [m]'), title(strcat('Bz [T], x = ', num2str(level)))
else
    disp('___ОШИБКА ВЫБОРА ПЛОСКОСТИ___');
end
colorbar
box on
hold on
grid on 


%% ------------------------------------------------------------------------- % Задание матрицы А

A = zeros(N+3,N+3);

if Calc
   for j = 1:N+3
        for i = 1:N+3
            if (i<=N) && (j<=N)
                bz1 = Calcbz(i, S, Node, ROI);
                bz2 = Calcbz(j, S, Node, ROI);
                Lmn = CalcLmn(i, j, S, Node);
                pmn = CalcPmn(i, j, ro, t, S, Node);
                Arr = bz1.*bz2;
                A(j,i) = zum(Arr) + alpfa*Lmn + betta*pmn;
            elseif (i==N+1) && (j<=N)
                Mx = CalcMx(j, S, Node, B0);
                A(j,i) = Mx;
            elseif (i==N+2) && (j<=N)
                My = CalcMy(j, S, Node, B0);
                A(j,i) = My;
            elseif (i==N+3) && (j<=N)
                Mz = CalcMz(j, S, Node, B0);
                A(j,i) = Mz;
            elseif (i<=N) && (j==N+1)
                Mx = CalcMx(i, S, Node, B0);
                A(j,i) = Mx;
            elseif (i<=N) && (j==N+2)
                My = CalcMy(i, S, Node, B0);
                A(j,i) = My;
            elseif (i<=N) && (j==N+3)
                Mz = CalcMz(i, S, Node, B0);
                A(j,i) = Mz;
            end
        end
    end 
end

clear Temp bz1 bz2

%% ------------------------------------------------------------------------- % Задание матрицы B

B = zeros(N+3,1);
    
if Calc
    for i = 1:N
        bz1 = Calcbz(i, S, Node, ROI);
        Arr = Bdes(:,1).*bz1;
        B(i,1) = zum(Arr);
    end 
end 

clear Temp i k j

%% ------------------------------------------------------------------------- % Задание матрицы I

Is = A\B;
I = Is(1:N);

if OutData && ~Calc
    
    % Planar X 
    %I = [8.42633735557664;9.42325949251371;1.62984088788197;-7.87163189959674;-16.0433228144389;-18.1431630657869;-12.3702512366417;-2.15557034294696;7.28717764417175;14.2952202793530;7.52620153427791;-15.3538374992532;-8.74843311453693;-9.90336851948315;-12.5526869374595;-14.4065257179497;-14.1319397272123;-11.9189704395977;-8.71161039088146;-6.09970640876417;-6.20448297735146;-19.4777666557040;-23.1980678749323;-13.2057671608991;-11.6919166484882;-9.44982599238083;-5.56036274931420;-4.54296342325507;-6.25842230879159;-7.58144762896815;-8.58153759798091;-11.1284816341830;-24.2382757954846;-23.7031432849005;-13.0474904855088;-8.59194222732858;2.85446087762592;1.70557338585474;1.08466686546759;5.22764306608155;0.556032992667370;-6.42495758487292;-10.5969663107088;-22.7435818644686;-16.6114773825114;-8.82653376815914;-3.70457664644607;0.594798764350955;-0.819135102352351;-0.589440761517196;0.0311569586981888;5.01779558610615;-2.32240444013715;-6.35611948964765;-13.7649600721263;-3.40534341788926;-2.78514589002836;-2.53847002223499;-0.799554031156257;-1.89186279103566;-1.59721716105632;-1.30257153107699;-2.39488029095611;-0.655964299877234;-0.409288432084384;0.210909095775388;10.5705257500136;3.16168516753485;-0.872029881975631;-8.21222990821963;-3.22559128081086;-2.60499356059544;-2.37529921976029;-3.78923308646378;0.510142324332879;5.63209944604617;13.4170430603986;19.5491475423567;7.40253198859574;3.23052326276017;-3.75046731477962;-8.42207738819402;-4.27910118758029;-4.90000770796737;-6.04889519973840;5.39750790521457;9.85305616339651;20.5087089627889;21.0438414733723;7.93404731207005;5.38710327586811;4.38701330685463;3.06398798667802;1.34852910114519;2.36592842720194;6.25539167026800;8.49748232637498;10.0113328387870;20.0036335528186;16.2833323335907;3.01004865523827;2.90527208665129;5.51717606877371;8.72453611748345;10.9375054050994;11.2120913958340;9.35825261534671;6.70893419737211;5.55399879242578;12.1594031771434;-10.7206358563943;-17.4896546014657;-10.4816119662830;-1.03886397917267;9.17581691453361;14.9487287436725;12.8488884923246;4.67719757748129;-4.82427520998112;-12.6176938146335;-11.6207716776849];
    
    % Planar Const
    %I = [74.3174245269862;55.2960280932351;44.1381976986628;36.3754028861978;29.9725540144082;24.4330954416940;19.6468957830870;15.6886934105810;12.7301341177906;10.9627055295881;10.5192246208522;11.4175958440164;13.5555754379326;16.7543905316388;20.8223664710683;25.6151088995393;31.0917459303080;37.3850731019383;45.0399677307813;55.3726335618360;78.6498549264518;55.2960280924802;38.7462497851861;28.8589387443805;19.7301645789746;11.3076325901754;3.47189237227670;-3.69125604518800;-9.91692565947051;-14.8115034658842;-17.9295156352235;-18.9094129763135;-17.6260508408024;-14.2523446203275;-9.17699419216873;-2.84791838575134;4.35594827557471;12.1940630867832;20.6081427059944;29.8378680169088;40.0896101329045;55.3726335616088;44.1381977006269;28.8589387445244;19.2496051002818;9.46916942193494;-0.125604018871342;-9.45357067598767;-18.2599917044694;-26.1455126740989;-32.5455814577002;-36.7506823365048;-38.1069080746947;-36.3643583014495;-31.8444934161878;-25.2322840293142;-17.2324364308610;-8.38675251769364;0.938269923065487;10.5215059627189;20.3148542517639;29.8378680168193;45.0399677301269;36.3754028848649;19.7301645790951;9.46916942197689;-1.30949566082516;-12.2912077247837;-23.2326410380570;-33.7236377458722;-43.3116914689899;-51.4003438626442;-56.9840732438164;-58.8452367993727;-56.4551802008195;-50.4841144243249;-42.1749107433537;-32.5009604661007;-22.0205689277567;-11.1353854510682;-0.213328296712617;10.5215059627202;20.6081427060146;37.3850731018922;29.9725540146625;11.3076325901390;-0.125604018908690;-12.2912077248091;-24.7802362843643;-37.0228886892782;-48.2761981131326;-58.2756582907816;-67.0732031862053;-73.8187387386754;-76.2372955304688;-73.0234367995213;-65.7507033903522;-56.7470566783114;-46.7388892454529;-35.5660560239691;-23.4771966830756;-11.1353854511293;0.938269923045042;12.1940630868654;31.0917459300245;24.4330954427372;3.47189237230148;-9.45357067612210;-23.2326410382995;-37.0228886896115;-49.2592328192447;-58.1923491933093;-63.5772352532622;-67.8880487042340;-73.7135282856299;-76.3952119508787;-72.0507568878811;-65.6890080121309;-61.3255049557576;-56.2109239432695;-47.5481452352714;-35.5660560250925;-22.0205689281677;-8.38675251760006;4.35594827585879;25.6151089013473;19.6468957822347;-3.69125604607505;-18.2599917046975;-33.7236377459731;-48.2761981115504;-58.1923491922273;-57.2047037945591;-40.7962702755668;-26.1337980813660;-26.0881803324287;-27.0570436534345;-24.8767922282434;-32.2223309379532;-45.2245850478330;-55.5102088739312;-56.2109239425372;-46.7388892451569;-32.5009604660992;-17.2324364307367;-2.84791838555517;20.8223664713702;15.6886934085849;-9.91692565998174;-26.1455126744696;-43.3116914692016;-58.2756582921132;-63.5772352539151;-40.7962702750716;-8.83074676289035;-41.0775917688182;-38.1004084334728;-36.4747213285599;-40.9517523479520;-35.8919525136135;-8.43709898702829;-45.2245850462482;-61.3255049570041;-56.7470566788865;-42.1749107431834;-25.2322840292405;-9.17699419220913;16.7543905306599;12.7301341170989;-14.8115034664029;-32.5455814581425;-51.4003438630620;-67.0732031888244;-67.8880487053546;-26.1337980815478;-41.0775917685415;-37.3294182885129;-37.6741480809400;-37.6678953393115;-37.5607270168518;-37.2193987572942;-35.8919525142282;-32.2223309366775;-65.6890080123262;-65.7507033879443;-50.4841144235780;-31.8444934162569;-14.2523446204337;13.5555754379015;10.9627055280792;-17.9295156356351;-36.7506823367033;-56.9840732442431;-73.8187387388351;-73.7135282843430;-26.0881803318145;-38.1004084337190;-37.6741480809453;-37.6333297259556;-37.6206396146789;-37.6312168991266;-37.5607270168616;-40.9517523478298;-24.8767922288858;-72.0507568879381;-73.0234368000043;-56.4551802009320;-36.3643583016112;-17.6260508411677;11.4175958439277;10.5192246217037;-18.9094129765097;-38.1069080749663;-58.8452368008287;-76.2372955311485;-76.3952119530298;-27.0570436530940;-36.4747213284586;-37.6678953393148;-37.6206396146784;-37.6425621304863;-37.6206396146837;-37.6678953393243;-36.4747213285285;-27.0570436536591;-76.3952119529258;-76.2372955308164;-58.8452368007247;-38.1069080749109;-18.9094129765052;10.5192246207240;11.4175958441129;-17.6260508411165;-36.3643583015862;-56.4551802009984;-73.0234368000044;-72.0507568883006;-24.8767922292417;-40.9517523479555;-37.5607270168457;-37.6312168991200;-37.6206396146798;-37.6333297259607;-37.6741480809534;-38.1004084336662;-26.0881803312847;-73.7135282846454;-73.8187387386220;-56.9840732440815;-36.7506823366047;-17.9295156355775;10.9627055286042;13.5555754375471;-14.2523446203792;-31.8444934161325;-50.4841144235547;-65.7507033875613;-65.6890080125256;-32.2223309364787;-35.8919525137758;-37.2193987572682;-37.5607270168462;-37.6678953393146;-37.6741480809471;-37.3294182885218;-41.0775917686624;-26.1337980819047;-67.8880487049329;-67.0732031891477;-51.4003438628597;-32.5455814579371;-14.8115034661779;12.7301341171492;16.7543905314595;-9.17699419197290;-25.2322840291172;-42.1749107430036;-56.7470566779688;-61.3255049555718;-45.2245850476008;-8.43709898709882;-35.8919525138817;-40.9517523478859;-36.4747213284954;-38.1004084336956;-41.0775917686112;-8.83074676299231;-40.7962702753284;-63.5772352538154;-58.2756582919741;-43.3116914689429;-26.1455126741655;-9.91692565961604;15.6886934096272;20.8223664710022;-2.84791838553461;-17.2324364306389;-32.5009604658763;-46.7388892448194;-56.2109239421917;-55.5102088734765;-45.2245850475930;-32.2223309363014;-24.8767922296006;-27.0570436530897;-26.0881803312903;-26.1337980818121;-40.7962702753227;-57.2047037939269;-58.1923491924664;-48.2761981114929;-33.7236377457341;-18.2599917044240;-3.69125604570992;19.6468957830027;25.6151089009375;4.35594827587225;-8.38675251751980;-22.0205689279934;-35.5660560249240;-47.5481452346878;-56.2109239421842;-61.3255049556633;-65.6890080126077;-72.0507568881679;-76.3952119532180;-73.7135282847392;-67.8880487048617;-63.5772352538397;-58.1923491924369;-49.2592328186655;-37.0228886892290;-23.2326410380623;-9.45357067584502;3.47189237253720;24.4330954417530;31.0917459305585;12.1940630870543;0.938269923211117;-11.1353854510014;-23.4771966829256;-35.5660560249306;-46.7388892448645;-56.7470566779731;-65.7507033875397;-73.0234367999191;-76.2372955309495;-73.8187387385567;-67.0732031890912;-58.2756582920823;-48.2761981115147;-37.0228886892275;-24.7802362842381;-12.2912077246061;-0.125604018708646;11.3076325902446;29.9725540142793;37.3850731024288;20.6081427062150;10.5215059628940;-0.213328296580270;-11.1353854509945;-22.0205689279667;-32.5009604658676;-42.1749107430075;-50.4841144234692;-56.4551802008924;-58.8452368007160;-56.9840732440634;-51.4003438629006;-43.3116914689860;-33.7236377457397;-23.2326410381018;-12.2912077246176;-1.30949566061749;9.46916942227318;19.7301645793703;36.3754028866828;45.0399677306826;29.8378680170825;20.3148542519749;10.5215059629110;0.938269923224318;-8.38675251752289;-17.2324364306350;-25.2322840291315;-31.8444934161009;-36.3643583015475;-38.1069080748608;-36.7506823365674;-32.5455814579738;-26.1455126742631;-18.2599917044982;-9.45357067593339;-0.125604018724633;9.46916942226071;19.2496051005679;28.8589387448951;44.1381977004177;55.3726335619486;40.0896101330914;29.8378680170929;20.6081427062466;12.1940630870684;4.35594827589005;-2.84791838552974;-9.17699419195483;-14.2523446203946;-17.6260508411209;-18.9094129764748;-17.9295156355838;-14.8115034662469;-9.91692565973920;-3.69125604578497;3.47189237244847;11.3076325902117;19.7301645793625;28.8589387448639;38.7462497855125;55.2960280927913;78.6498549266372;55.3726335618230;45.0399677308832;37.3850731024463;31.0917459306024;25.6151089009651;20.8223664709037;16.7543905317489;13.5555754372196;11.4175958441753;10.5192246210433;10.9627055283549;12.7301341172519;15.6886934089656;19.6468957831073;24.4330954412526;29.9725540146549;36.3754028864349;44.1381977003673;55.2960280929096;74.3174245268928];
    
    % Planar Z
    I = [-5.90955126372827;-4.34488656682874;-3.43984602803929;-2.82215882907184;-2.31845347627364;-1.87837135403925;-1.47994576280814;-1.11623831525395;-0.793630672013270;-0.530940593886078;-0.354444271768479;-0.288471572614292;-0.346177249627259;-0.525719339861724;-0.813328503641654;-1.19094671162621;-1.64541690922500;-2.17816262493571;-2.82718990754154;-3.69884287809966;-5.64209187818827;-4.34488656682042;-2.97369611744928;-2.16781043870265;-1.43155418186137;-0.756812526240660;-0.126866075984483;0.460592919547323;0.993187053757825;1.44393238016374;1.77414561959802;1.94497722089952;1.93444530331407;1.74732272764050;1.40986937126307;0.955798472951864;0.414733884222028;-0.193435754068413;-0.862106804165240;-1.60807209092270;-2.44602306298803;-3.69884287810156;-3.43984602806802;-2.16781043870400;-1.38830561889333;-0.607928395128396;0.146084635076263;0.873493143469825;1.56464560812148;2.20095475006948;2.74694003039234;3.14479912844109;3.33092909435211;3.27360435730463;2.99427833422444;2.54767626791266;1.98682039436182;1.34760353452883;0.652785684675232;-0.0818800317602549;-0.849924682922156;-1.60807209092204;-2.82718990753365;-2.82215882902969;-1.43155418185388;-0.607928395128129;0.232230511935340;1.06175109215041;1.86567799789631;2.62653717424998;3.33544243930959;3.97094456514621;4.45663061205007;4.67336053941167;4.55925387778088;4.17350549296655;3.62840999283646;2.99437730049250;2.29108743635788;1.52901027901748;0.730398144375409;-0.0818800317600515;-0.862106804164238;-2.17816262493625;-2.31845347628570;-0.756812526249303;0.146084635076842;1.06175109215123;1.94638175518685;2.75106340009154;3.43749050375339;4.04347955288538;4.64447476564010;5.19394641896361;5.45110213068118;5.26062180604387;4.78614697651461;4.26894399642287;3.74412909577483;3.12337523436019;2.37133567893236;1.52901027901719;0.652785684675797;-0.193435754067943;-1.64541690923120;-1.87837135404518;-0.126866075977533;0.873493143471499;1.86567799789847;2.75106340010314;3.37828947327992;3.62706400634139;3.59448196741652;3.67793355221456;4.14180735449654;4.44073026261520;4.12109345443948;3.70523001461074;3.70680591612267;3.84367197497228;3.68458010621167;3.12337523436490;2.29108743636012;1.34760353452819;0.414733884219960;-1.19094671162462;-1.47994576279454;0.460592919551808;1.56464560812564;2.62653717424852;3.43749050375294;3.62706400633475;2.68488979748578;0.562249044461821;-0.807814015726461;-0.715513804401158;-0.450428667991566;-0.703921145235605;-0.263173430017786;1.14836474079544;2.86192686567314;3.84367197497775;3.74412909577529;2.99437730049165;1.98682039436104;0.955798472951481;-0.813328503630414;-1.11623831525884;0.993187053766551;2.20095475006980;3.33544243931171;4.04347955289486;3.59448196743791;0.562249044437867;-2.37133426261598;1.04150728108007;0.626179910549192;0.482918137912661;0.957054203203193;0.612874033310126;-2.51154530200002;1.14836474078641;3.70680591612781;4.26894399641186;3.62840999283339;2.54767626791215;1.40986937126449;-0.525719339859332;-0.793630671996513;1.44393238016538;2.74694003039611;3.97094456515150;4.64447476567202;3.67793355221256;-0.807814015714590;1.04150728107707;0.497986531555487;0.475402388038980;0.473873309620204;0.495454081412993;0.531079043301976;0.612874033319170;-0.263173430021670;3.70523001461459;4.78614697648589;4.17350549295377;2.99427833422506;1.74732272764256;-0.346177249620865;-0.530940593869024;1.77414561960738;3.14479912844929;4.45663061205493;5.19394641896933;4.14180735450154;-0.715513804409388;0.626179910551428;0.475402388039041;0.420029333002062;0.407291190459070;0.431640443559723;0.495454081413119;0.957054203202125;-0.703921145239537;4.12109345443578;5.26062180605329;4.55925387778341;3.27360435730649;1.93444530331675;-0.288471572629029;-0.354444271768641;1.94497722090084;3.33092909435611;4.67336053943062;5.45110213071467;4.44073026261353;-0.450428667991530;0.482918137911681;0.473873309620200;0.407291190459041;0.388849383284543;0.407291190459126;0.473873309620353;0.482918137912442;-0.450428667986671;4.44073026261800;5.45110213071248;4.67336053942978;3.33092909435556;1.94497722090126;-0.354444271750525;-0.288471572623253;1.93444530331654;3.27360435730602;4.55925387778383;5.26062180604266;4.12109345443743;-0.703921145230990;0.957054203203136;0.495454081412856;0.431640443559598;0.407291190459054;0.420029333002118;0.475402388039133;0.626179910551155;-0.715513804410883;4.14180735450432;5.19394641896599;4.45663061205361;3.14479912844802;1.77414561960596;-0.530940593886763;-0.346177249622794;1.74732272764060;2.99427833422306;4.17350549295300;4.78614697648650;3.70523001461328;-0.263173430025006;0.612874033313109;0.531079043301578;0.495454081412857;0.473873309620189;0.475402388039044;0.497986531555588;1.04150728107818;-0.807814015723224;3.67793355220741;4.64447476567325;3.97094456514894;2.74694003039307;1.44393238016245;-0.793630671996697;-0.525719339869024;1.40986937126029;2.54767626790978;3.62840999283216;4.26894399641860;3.70680591611111;1.14836474079446;-2.51154530200159;0.612874033314766;0.957054203202243;0.482918137912401;0.626179910550877;1.04150728107864;-2.37133426261277;0.562249044450357;3.59448196743526;4.04347955289033;3.33544243930855;2.20095475006624;0.993187053762916;-1.11623831526331;-0.813328503641386;0.955798472949404;1.98682039435916;2.99437730048977;3.74412909577292;3.84367197497355;2.86192686567055;1.14836474079461;-0.263173430027043;-0.703921145228710;-0.450428667993500;-0.715513804411529;-0.807814015723562;0.562249044450230;2.68488979748293;3.62706400633895;3.43749050374450;2.62653717424544;1.56464560812238;0.460592919548432;-1.47994576280413;-1.19094671162453;0.414733884218959;1.34760353452689;2.29108743635845;3.12337523436345;3.68458010620989;3.84367197497305;3.70680591611244;3.70523001461468;4.12109345443804;4.44073026261961;4.14180735450625;3.67793355220683;3.59448196743550;3.62706400633859;3.37828947327468;2.75106340008964;1.86567799789482;0.873493143468208;-0.126866075979114;-1.87837135402859;-1.64541690923452;-0.193435754070448;0.652785684673731;1.52901027901524;2.37133567893077;3.12337523436362;3.74412909577333;4.26894399641837;4.78614697648558;5.26062180604205;5.45110213071388;5.19394641896553;4.64447476567237;4.04347955289174;3.43749050374475;2.75106340008970;1.94638175518366;1.06175109214801;0.146084635074406;-0.756812526248803;-2.31845347628003;-2.17816262494092;-0.862106804166495;-0.0818800317618055;0.730398144373399;1.52901027901550;2.29108743635804;2.99437730048979;3.62840999283251;4.17350549295213;4.55925387778261;4.67336053942959;4.45663061205359;3.97094456514966;3.33544243930959;2.62653717424595;1.86567799789568;1.06175109214815;0.232230511932082;-0.607928395132581;-1.43155418185841;-2.82215882906690;-2.82718990753575;-1.60807209092389;-0.849924682924022;-0.0818800317621198;0.652785684673283;1.34760353452655;1.98682039435899;2.54767626790983;2.99427833422293;3.27360435730526;3.33092909435483;3.14479912844789;2.74694003039396;2.20095475006770;1.56464560812354;0.873493143469299;0.146084635074751;-0.607928395132427;-1.38830561889763;-2.16781043871016;-3.43984602806405;-3.69884287810438;-2.44602306298951;-1.60807209092392;-0.862106804166797;-0.193435754070836;0.414733884218394;0.955798472948876;1.40986937125997;1.74732272764040;1.93444530331576;1.94497722090094;1.77414561960653;1.44393238016399;0.993187053764946;0.460592919550066;-0.126866075977369;-0.756812526248236;-1.43155418185850;-2.16781043871021;-2.97369611745436;-4.34488656682773;-5.64209187818750;-3.69884287810275;-2.82718990753722;-2.17816262493942;-1.64541690923764;-1.19094671162451;-0.813328503642938;-0.525719339871232;-0.346177249622700;-0.288471572628890;-0.354444271751568;-0.530940593880985;-0.793630671997278;-1.11623831525351;-1.47994576280416;-1.87837135402140;-2.31845347628361;-2.82215882906538;-3.43984602806521;-4.34488656682860;-5.90955126372248];
    
end

[Fi, Ll, II] = Transform2D(H, L, nfi, nL, I);
   
%% ------------------------------------------------------------------------- % Отрисовка потоковой функции

rgb = ones(T,3);
if Calc || OutData
    figure('Name','Потоковая функция','NumberTitle','off'); 
    movegui([1145 560]);
    contourf(Fi,Ll,II);
    %surf(fi,XX,II);
    box on
    hold on
    xlabel('fi'), ylabel('L'), title('Stream Function')
    colorbar
    
    StFun = zeros(T,1);

    for i = 1:T
        StFun(i,1) = (I(S(i,1),1) + I(S(i,2),1) + I(S(i,3),1))/3; 
    end
    
    StFun = StFun - min(min(StFun));
    StFun = 0.6667*StFun/max(max(StFun));
    
    for i = 1:T
        rgb(i,:) = hsv2rgb([StFun(i,1) 1 1]);
    end
end

%% ------------------------------------------------------------------------- % Отрисовка элементов

figure('Name','Элементы','NumberTitle','off'); 
movegui([0 30]);
x = [Node(S(1,1),1) Node(S(1,2),1) Node(S(1,3),1)];
y = [Node(S(1,1),2) Node(S(1,2),2) Node(S(1,3),2)];
z = [Node(S(1,1),3) Node(S(1,2),3) Node(S(1,3),3)];
fill3(x, y, z,rgb(1,:))
hold on
%text(sum(x)/length(x),sum(y)/length(y),sum(z)/length(z),num2str(1),'Color','blue','FontSize',8) % Нумерация 1ого элемента
xlabel ('x [m]'), ylabel ('y [m]'), zlabel ('z [m]')
grid on
for i = 2:T
    x = [Node(S(i,1),1) Node(S(i,2),1) Node(S(i,3),1)];
    y = [Node(S(i,1),2) Node(S(i,2),2) Node(S(i,3),2)];
    z = [Node(S(i,1),3) Node(S(i,2),3) Node(S(i,3),3)];
    fill3(x, y, z,rgb(i,:)) % Отрисовка элементов
    %text(sum(x)/length(x),sum(y)/length(y),sum(z)/length(z),num2str(i),'Color','blue','FontSize',8) % Нумерация элементов
end
%axis equal

%% ------------------------------------------------------------------------- % Поле
 
if Calc || OutData
    
    Bz = zeros(K,1);
    Temp = 0;
    for j = 1:N
        b = Calcbz(j, S, Node, ROI);
        Temp = Temp + I(j,1)*b;
    end
    Bz(:,1) = Temp;

    [X1,Y1,Z1,Bz] = Transform3D(lx, ly, lz, nx, ny, nz, Bz);

    figure('Name','Полученное поле','NumberTitle','off'); 
    movegui([570 30]);
    if (plane == 0) % ---------------------------------------------------------- XY
        k = find(Z1(1,1,:)==level);
        surf(X1(:,:,k), Y1(:,:,k), Bz(:,:,k))
        xlabel ('x [m]'), ylabel ('y [m]'), title(strcat('Bz [T], z = ', num2str(level))) 
    elseif (plane == 1) % ------------------------------------------------------ XZ
        k = find(Y1(1,:,1)==level);
        XX1 = reshape(X1(:,k,:),[nx,nz,1]);
        ZZ1 = reshape(Z1(:,k,:),[nx,nz,1]);
        BB1 = reshape(Bz(:,k,:),[nx,nz,1]);
        surf(XX1, ZZ1, BB1)
        xlabel ('x [m]'), ylabel ('z [m]'), title(strcat('Bz [T], y = ', num2str(level)))
    elseif (plane == 2) % ------------------------------------------------------ YZ
        k = find(X1(:,1,1)==level);
        YY1 = reshape(Y1(k,:,:),[ny,nz,1]);
        ZZ1 = reshape(Z1(k,:,:),[ny,nz,1]);
        BB1 = reshape(Bz(k,:,:),[ny,nz,1]);
        surf(YY1, ZZ1, BB1)
        xlabel ('y [m]'), ylabel ('z [m]'), title(strcat('Bz [T], x = ', num2str(level)))
    else
        disp('___ОШИБКА ВЫБОРА ПЛОСКОСТИ___');
    end
    colorbar
    box on
    hold on
    grid on
end

%% ------------------------------------------------------------------------- % Интерполяция

if (Calc && Interp) || (OutData && Interp)
    nfi_int = 2001;
    nL_int = 1001;

    [Fi_int, L_int] = meshgrid(linspace(-H,H,nfi_int), linspace(-L,L,nL_int));

    I_int = interp2(Fi,Ll,II,Fi_int,L_int);
end

%% ------------------------------------------------------------------------- % Контур тока

if (Calc && Interp) || (OutData && Interp)
    
    Max = max(max(I_int));  % Максимальное значение функции потока
    Min = min(min(I_int));  % Минимальное значение функции потока
    df = (Max-Min)/(Nc+1);  % Шаг витков
    
    Red = [];               % Контура с током против часовой
    Blue = [];              % Контура с током по часовой 

    for k = 1:Nc
        K1 = Min+df*k;       % Уровень
        
        if K1 >= (Max+Min)/2
            AA = find((I_int >= ((Min+df*k)-er*(Min+df*k)) & I_int <= ((Min+df*k)+er*(Min+df*k)) & I_int >= 0) | (I_int >= ((Min+df*k)+er*(Min+df*k)) & I_int <= ((Min+df*k)-er*(Min+df*k)) & I_int < 0));
        else
            AA = find((I_int >= ((Min+df*k)-eb*(Min+df*k)) & I_int <= ((Min+df*k)+eb*(Min+df*k)) & I_int >= 0) | (I_int >= ((Min+df*k)+eb*(Min+df*k)) & I_int <= ((Min+df*k)-eb*(Min+df*k)) & I_int < 0));
        end
       
        i = ceil(AA/(nL_int));   % Номера столбцов

        j = mod(AA, nL_int);     % Номера строк
        j(j==0) = nL_int;

        Temp = zeros(length(i),2);

        for a = 1:length(i)
            Temp(a,:) = [L_int(j(a),i(a)) Fi_int(j(a),i(a))];
        end

        if K1 >= (Max+Min)/2
            Red = [Red; Temp];
        else
            Blue = [Blue; Temp];
        end
    end
    
    Lred = length(Red);
    Lblue = length(Blue);
    
    if Lred ~= 0
        Red1 = zeros(length(Red(:,1)),3);   % Массивы для записи контура в координатах
        Red2 = zeros(length(Red(:,1)),2);   % Массивы для записи контура в плоскости
        Red1(:,1) = Red(:,1);               % X
        Red1(:,2) = Red(:,2);               % Y
        Red1(:,3) = D;                      % Z
        
        Red2(:,1) = Red(:,1);               % X
        Red2(:,2) = Red(:,2);               % R
    end
    
    if Lblue ~= 0
        Blue1 = zeros(length(Blue(:,1)),3); % Массивы для записи контура в координатах 
        Blue2 = zeros(length(Blue(:,1)),2); % Массивы для записи контура в плоскости
        Blue1(:,1) = Blue(:,1);             % X
        Blue1(:,2) = Blue(:,2);             % Y
        Blue1(:,3) = D;                     % Z
        
        Blue2(:,1) = Blue(:,1);             % X
        Blue2(:,2) = Blue(:,2);           % R
    end
     
end

%% ------------------------------------------------------------------------- % Отрисовка интерполированной фенкции и контуров

if (Calc && Interp) || (OutData && Interp)
    figure('Name','Интерполированная потоковая функция','NumberTitle','off');    % Интерполированная функция 
    movegui([1255 560]);
    contourf(Fi_int,L_int,I_int)
    box on
    hold on
    xlabel('fi'), ylabel('L'), title('Stream Function')
    if Lred ~= 0
        plot(Red(:,2), Red(:,1), '.r')
    end
    if Lblue ~= 0
        plot(Blue(:,2), Blue(:,1), '.b')
    end  
    colorbar

    figure('Name','Намотка 3D','NumberTitle','off');    % Намотка 3D 
    movegui([1145 30]);
    if Lred ~= 0
        plot3(Red1(:,1), Red1(:,2), Red1(:,3), '.r')
        hold on
    end
    if Lblue ~= 0
        plot3(Blue1(:,1), Blue1(:,2), Blue1(:,3), '.b')
    end
    box on
    xlabel ('x [m]'), ylabel ('y [m]'), zlabel ('z [m]')
    %axis equal
    grid on 
    
    figure('Name','Намотка 2D','NumberTitle','off');     % Намотка 2D 
    movegui([1255 30]);
    if Lred ~= 0
        plot(Red2(:,2), Red2(:,1), '.r')
        hold on
    end
    if Lblue ~= 0
        plot(Blue2(:,2), Blue2(:,1), '.b')
    end
    box on
    xlabel ('r [m]'), ylabel ('x [m]')
    axis equal
    grid on 
end
toc

%% ------------------------------------------------------------------------- % Функции

function Lmn = CalcLmn(n, m, S, Node) % Параметр Lmn 
    Sin = N2T(n, S);
    Sim = N2T(m, S);
    Sum = 0;
    for i=1:length(Sim)
        for j=1:length(Sin)
            Arn = Area(S(Sin(j),:),Node);
            Arm = Area(S(Sim(i),:),Node);
            Jn = CalcJn(n, S(Sin(j),:), Node);
            Jm = CalcJn(m, S(Sim(i),:), Node);
            rn = [(Node(S(Sin(j),1),1)+Node(S(Sin(j),2),1)+Node(S(Sin(j),3),1))/3 ...
                (Node(S(Sin(j),1),2)+Node(S(Sin(j),2),2)+Node(S(Sin(j),3),2))/3 ...
                (Node(S(Sin(j),1),3)+Node(S(Sin(j),2),3)+Node(S(Sin(j),3),3))/3];
            
            rm = [(Node(S(Sim(i),1),1)+Node(S(Sim(i),2),1)+Node(S(Sim(i),3),1))/3 ...
                (Node(S(Sim(i),1),2)+Node(S(Sim(i),2),2)+Node(S(Sim(i),3),2))/3 ...
                (Node(S(Sim(i),1),3)+Node(S(Sim(i),2),3)+Node(S(Sim(i),3),3))/3];
            d = Distance(rn, rm);
            if Sim(i)~=Sin(j)
                Sum = Sum + ScalarP(Jn(1,:),Jm(1,:))*Arn*Arm/d;
            else
                r1 = Node(S(Sim(i),1),:);
                r2 = Node(S(Sim(i),2),:);
                r3 = Node(S(Sim(i),3),:);
                aa = ScalarP((r3-r1),(r3-r1));
                bb = ScalarP((r3-r1),(r3-r2));
                cc = ScalarP((r3-r2),(r3-r2));
                p1 = sqrt(aa*cc);
                p2 = sqrt(aa-2*bb+cc);
                Sum = Sum + (4*ScalarP(Jn(1,:),Jm(1,:))*Arn*Arm)*((1/(6*sqrt(aa)))*log(((aa-bb+sqrt(aa)*p2)*(bb+p1))/((-bb+p1)*(-aa+bb+sqrt(aa)*p2)))+...
                    (1/(6*sqrt(cc)))*log(((bb+p1)*(-bb+cc+sqrt(cc)*p2))/((bb-cc+sqrt(cc)*p2)*(-bb+p1)))+...
                    (1/(6*p2))*log(((aa-bb+sqrt(aa)*p2)*(-bb+cc+sqrt(cc)*p2))/((bb-cc+sqrt(cc)*p2)*(-aa+bb+sqrt(aa)*p2))));
            end
        end
    end
    Lmn = Sum*10^(-7);
end

function bz = Calcbz(n, S, Node, ROI) % Параметр b 
    Si = N2T(n, S); % 
    Sum = zeros(length(ROI(:,1)),1);
    r1 = zeros(1,3); % Радиус вектор узлов
    r2 = zeros(1,3);
    r3 = zeros(1,3);
    point = zeros(4,3);
    w = [-9/32 25/96 25/96 25/96];
    for i=1:length(Si)
        integral = zeros(length(ROI(:,1)),1);  
        Jn = CalcJn(n, S(Si(i),:), Node);
        r1(:) = [Node(S(Si(i),1),1) Node(S(Si(i),1),2) Node(S(Si(i),1),3)]; 
        r2(:) = [Node(S(Si(i),2),1) Node(S(Si(i),2),2) Node(S(Si(i),2),3)];  
        r3(:) = [Node(S(Si(i),3),1) Node(S(Si(i),3),2) Node(S(Si(i),3),3)];
        point(1,:) = (r1 + r2 - 2*r3)/3 + r3;
        point(2,:) = 3*(r1 - r3)/5 + (r2 - r3)/5 + r3;
        point(3,:) = (r1 - r3)/5 + 3*(r2 - r3)/5 + r3;
        point(4,:) = (r1 + r2 - 2*r3)/5 + r3;      
        for j = 1:4
            d = DistanceROI(point(j,:),ROI);
            integral = integral + (w(j)*(Jn(1,2)*(ROI(:,1)-point(j,1))-Jn(1,1)*(ROI(:,2)-point(j,2))))./(d.^3);
        end      
        Sum = Sum + integral;
    end
    bz = Sum*10^(-7);
end

function Mx = CalcMx(n, S, Node, B0) % Параметр Mx 
    Sum = 0;
    Si = N2T(n, S); % 
    r1 = zeros(1,3); % Радиус вектор узлов
    r2 = zeros(1,3);
    r3 = zeros(1,3);
    point = zeros(4,3);
    w = [-9/32 25/96 25/96 25/96];
    for i=1:length(Si)
        integral = 0; 
        Jn = CalcJn(n, S(Si(i),:), Node);
        r1(:) = [Node(S(Si(i),1),1) Node(S(Si(i),1),2) Node(S(Si(i),1),3)]; 
        r2(:) = [Node(S(Si(i),2),1) Node(S(Si(i),2),2) Node(S(Si(i),2),3)];  
        r3(:) = [Node(S(Si(i),3),1) Node(S(Si(i),3),2) Node(S(Si(i),3),3)];
        point(1,:) = (r1 + r2 - 2*r3)/3 + r3;
        point(2,:) = 3*(r1 - r3)/5 + (r2 - r3)/5 + r3;
        point(3,:) = (r1 - r3)/5 + 3*(r2 - r3)/5 + r3;
        point(4,:) = (r1 + r2 - 2*r3)/5 + r3;      
        for j = 1:4
            integral = integral + (w(j)*(Jn(1,1)*point(j,3)));
        end      
        Sum = Sum + integral;
    end
    Mx = Sum*B0;
end

function My = CalcMy(n, S, Node, B0) % Параметр My 
    Sum = 0;
    Si = N2T(n, S); % 
    r1 = zeros(1,3); % Радиус вектор узлов
    r2 = zeros(1,3);
    r3 = zeros(1,3);
    point = zeros(4,3);
    w = [-9/32 25/96 25/96 25/96];
    for i=1:length(Si)
        integral = 0; 
        Jn = CalcJn(n, S(Si(i),:), Node);
        r1(:) = [Node(S(Si(i),1),1) Node(S(Si(i),1),2) Node(S(Si(i),1),3)]; 
        r2(:) = [Node(S(Si(i),2),1) Node(S(Si(i),2),2) Node(S(Si(i),2),3)];  
        r3(:) = [Node(S(Si(i),3),1) Node(S(Si(i),3),2) Node(S(Si(i),3),3)];
        point(1,:) = (r1 + r2 - 2*r3)/3 + r3;
        point(2,:) = 3*(r1 - r3)/5 + (r2 - r3)/5 + r3;
        point(3,:) = (r1 - r3)/5 + 3*(r2 - r3)/5 + r3;
        point(4,:) = (r1 + r2 - 2*r3)/5 + r3;      
        for j = 1:4
            integral = integral + (w(j)*(Jn(1,2)*point(j,3)));
        end      
        Sum = Sum + integral;
    end
    My = Sum*B0;
end

function Mz = CalcMz(n, S, Node, B0) % Параметр Mz 
    Sum = 0;
    Si = N2T(n, S); % 
    r1 = zeros(1,3); % Радиус вектор узлов
    r2 = zeros(1,3);
    r3 = zeros(1,3);
    point = zeros(4,3);
    w = [-9/32 25/96 25/96 25/96];
    for i=1:length(Si)
        integral = 0; 
        Jn = CalcJn(n, S(Si(i),:), Node);
        r1(:) = [Node(S(Si(i),1),1) Node(S(Si(i),1),2) Node(S(Si(i),1),3)]; 
        r2(:) = [Node(S(Si(i),2),1) Node(S(Si(i),2),2) Node(S(Si(i),2),3)];  
        r3(:) = [Node(S(Si(i),3),1) Node(S(Si(i),3),2) Node(S(Si(i),3),3)];
        point(1,:) = (r1 + r2 - 2*r3)/3 + r3;
        point(2,:) = 3*(r1 - r3)/5 + (r2 - r3)/5 + r3;
        point(3,:) = (r1 - r3)/5 + 3*(r2 - r3)/5 + r3;
        point(4,:) = (r1 + r2 - 2*r3)/5 + r3;      
        for j = 1:4
            integral = integral - (w(j)*(Jn(1,1)*point(j,1) + Jn(1,2)*point(j,2)));
        end      
        Sum = Sum + integral;
    end
    Mz = Sum*B0;
end

function pmn = CalcPmn(n, m, ro, t, S, Node) % Параметр p 
    Sin = N2T(n, S);
    Sim = N2T(m, S);
    Sum = 0;
    for i=1:length(Sim)
        for j=1:length(Sin)
            Arn = Area(S(Sin(j),:),Node);
            Arm = Area(S(Sim(i),:),Node);
            Jn = CalcJn(n, S(Sin(j),:), Node);
            Jm = CalcJn(m, S(Sim(i),:), Node);
            if Sim(i)==Sin(j)
                Sum = Sum + ScalarP(Jn(1,:),Jm(1,:))*Arn;
            end
        end
    end
    pmn = Sum*(ro/t);
end

function Jn = CalcJn(n, St, Node) % Базисный вектор тока
    t = find(St == n);
    Jn = zeros(2,3);
    Ar = Area(St, Node);
    if t == 1
        Jn(1,:) = (Node(St(3),:)-Node(St(2),:))/(2*Ar);
        Jn(2,:) = Node(St(2),:);
        %Jn(2,:) = -(Node(St(3),:)-Node(St(1),:))/(2*Area);
        %Jn(3,:) = -(Node(St(1),:)-Node(St(2),:))/(2*Area);
    elseif t == 2
        Jn(1,:) = (Node(St(1),:)-Node(St(3),:))/(2*Ar);
        Jn(2,:) = Node(St(3),:);
        %Jn(2,:) = -(Node(St(1),:)-Node(St(2),:))/(2*Area);
        %Jn(3,:) = -(Node(St(2),:)-Node(St(3),:))/(2*Area);
    elseif t == 3
        Jn(1,:) = (Node(St(2),:)-Node(St(1),:))/(2*Ar);
        Jn(2,:) = Node(St(1),:);
        %Jn(2,:) = -(Node(St(2),:)-Node(St(3),:))/(2*Area);
        %Jn(3,:) = -(Node(St(3),:)-Node(St(1),:))/(2*Area);
    else
        disp('___ОШИБКА ВЫБОРА УЗЛА/ЭЛЕМЕНТА___');
    end
end

function Ar = Area(St, Node) % Возвращает площадь элемента 
    S1 = det([1 Node(St(1),1) Node(St(1), 2); 1 Node(St(2),1) Node(St(2), 2); 1 Node(St(3),1) Node(St(3), 2)]);
    S2 = det([1 Node(St(1),1) Node(St(1), 3); 1 Node(St(2),1) Node(St(2), 3); 1 Node(St(3),1) Node(St(3), 3)]);
    S3 = det([1 Node(St(1),2) Node(St(1), 3); 1 Node(St(2),2) Node(St(2), 3); 1 Node(St(3),2) Node(St(3), 3)]);
    Ar = 0.5*sqrt(S1^2+S2^2+S3^2);
end

function Ar1 = Area1(St, Node) % Возвращает площадь элемента 
    a = sqrt((Node(St(1),1)-Node(St(2),1))^2 + (Node(St(1),2)-Node(St(2),2))^2 + (Node(St(1),3)-Node(St(2),3))^2);
    b = sqrt((Node(St(2),1)-Node(St(3),1))^2 + (Node(St(2),2)-Node(St(3),2))^2 + (Node(St(2),3)-Node(St(3),3))^2);
    c = sqrt((Node(St(3),1)-Node(St(1),1))^2 + (Node(St(3),2)-Node(St(1),2))^2 + (Node(St(3),3)-Node(St(1),3))^2);
    p = (a+b+c)/2;
    Ar1 = sqrt(p*(p-a)*(p-b)*(p-c));
end

function Si = N2T(n, S) % Возвращает номера элементов, содержихих указанный узел
    [rows, cols] = find(S == n);
    %Si = rows;
    Si = sort(rows);
end

function d = Distance(Node1, Node2) % Расстояние между двумя узлами
    d = sqrt((Node1(1)-Node2(1))^2+(Node1(2)-Node2(2))^2+(Node1(3)-Node2(3))^2);
end

function di = DistanceROI(Node, ROI) % Расстояние между двумя узлами
    di = sqrt((Node(1)-ROI(:,1)).^2+(Node(2)-ROI(:,2)).^2+(Node(3)-ROI(:,3)).^2);
end

function [Fi, L, II] = Transform2D(H, L, nfi, nL, I) % Преобразование массива вида Node или ROI в двумерный массив для построения
    [Fi, L] = meshgrid(linspace(-H,H,nfi), linspace(-L,L,nL));
    II = reshape(I,[nfi,nL]);
    %II = [II(nfi,:); II];
    II = transpose(II);
end

function [X, Y, Z, B] = Transform3D(lx, ly, lz, nx, ny, nz, Bdes) % Преобразование массива вида Node или ROI в трехмерный массив для построения
    [X, Y, Z] = ndgrid(linspace(-lx/2,lx/2,nx),linspace(-ly/2,ly/2,ny),linspace(-lz/2,lz/2,nz));
    B = reshape(Bdes,[nx,ny,nz]);    
end

function p = ScalarP(Vector1, Vector2) % Радиус вектор точки
    p = Vector1(1)*Vector2(1) + Vector1(2)*Vector2(2) + Vector1(3)*Vector2(3);
end

function s = zum(Arr) % Радиус вектор точки
    s = 0;
    for i=1:length(Arr)
        s = s + Arr(i);
    end
end





